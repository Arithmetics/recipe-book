// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       String @id @default(uuid()) @postgresql.Uuid
  name     String @default("")
  email    String @unique @default("")
  password String
}

model Ingredient {
  id             String               @id @default(uuid()) @postgresql.Uuid
  name           String               @default("")
  note           String               @default("")
  status         IngredientStatusType
  key            Boolean              @default(false)
  onShoppingList Boolean              @default(false)
  category       Category?            @relation("Ingredient_category", fields: [categoryId], references: [id])
  categoryId     String?              @map("category") @postgresql.Uuid
  recipes        Recipe[]             @relation("Ingredient_recipes")
  image          CloudImage?          @relation("Ingredient_image", fields: [imageId], references: [id])
  imageId        String?              @map("image") @postgresql.Uuid

  @@index([categoryId])
  @@index([imageId])
}

model Category {
  id                       String       @id @default(uuid()) @postgresql.Uuid
  name                     String       @default("")
  order                    Int?         @unique
  image                    CloudImage?  @relation("Category_image", fields: [imageId], references: [id])
  imageId                  String?      @map("image") @postgresql.Uuid
  from_Ingredient_category Ingredient[] @relation("Ingredient_category")

  @@index([imageId])
}

model Recipe {
  id           String       @id @default(uuid()) @postgresql.Uuid
  name         String       @default("")
  originalLink String       @default("")
  ingredients  Ingredient[] @relation("Ingredient_recipes")
  image        CloudImage?  @relation("Recipe_image", fields: [imageId], references: [id])
  imageId      String?      @map("image") @postgresql.Uuid
  tags         Tag[]        @relation("Recipe_tags")
  instructions Json         @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")

  @@index([imageId])
}

model CloudImage {
  id                    String       @id @default(uuid()) @postgresql.Uuid
  image                 Json?
  altText               String       @default("")
  from_Ingredient_image Ingredient[] @relation("Ingredient_image")
  from_Category_image   Category[]   @relation("Category_image")
  from_Recipe_image     Recipe[]     @relation("Recipe_image")
  from_Tag_image        Tag[]        @relation("Tag_image")
}

model RecipeToTry {
  id           String @id @default(uuid()) @postgresql.Uuid
  name         String @default("")
  originalLink String @default("")
}

model Tag {
  id               String      @id @default(uuid()) @postgresql.Uuid
  name             String      @default("")
  image            CloudImage? @relation("Tag_image", fields: [imageId], references: [id])
  imageId          String?     @map("image") @postgresql.Uuid
  from_Recipe_tags Recipe[]    @relation("Recipe_tags")

  @@index([imageId])
}

enum IngredientStatusType {
  GOOD
  LOW
  OUT
}