# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Ingredient {
  id: ID!
  name: String
  note: String
  status: IngredientStatusType
  key: Boolean
  onShoppingList: Boolean
  category: Category
  recipes(
    where: RecipeWhereInput! = {}
    orderBy: [RecipeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Recipe!]
  recipesCount(where: RecipeWhereInput! = {}): Int
  image: CloudImage
}

enum IngredientStatusType {
  GOOD
  LOW
  OUT
}

input IngredientWhereUniqueInput {
  id: ID
}

input IngredientWhereInput {
  AND: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  NOT: [IngredientWhereInput!]
  id: IDFilter
  name: StringFilter
  note: StringFilter
  status: IngredientStatusTypeNullableFilter
  key: BooleanFilter
  onShoppingList: BooleanFilter
  category: CategoryWhereInput
  recipes: RecipeManyRelationFilter
  image: CloudImageWhereInput
}

input IngredientStatusTypeNullableFilter {
  equals: IngredientStatusType
  in: [IngredientStatusType!]
  notIn: [IngredientStatusType!]
  not: IngredientStatusTypeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input RecipeManyRelationFilter {
  every: RecipeWhereInput
  some: RecipeWhereInput
  none: RecipeWhereInput
}

input IngredientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  note: OrderDirection
  status: OrderDirection
  key: OrderDirection
  onShoppingList: OrderDirection
}

input IngredientUpdateInput {
  name: String
  note: String
  status: IngredientStatusType
  key: Boolean
  onShoppingList: Boolean
  category: CategoryRelateToOneForUpdateInput
  recipes: RecipeRelateToManyForUpdateInput
  image: CloudImageRelateToOneForUpdateInput
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input RecipeRelateToManyForUpdateInput {
  disconnect: [RecipeWhereUniqueInput!]
  set: [RecipeWhereUniqueInput!]
  create: [RecipeCreateInput!]
  connect: [RecipeWhereUniqueInput!]
}

input CloudImageRelateToOneForUpdateInput {
  create: CloudImageCreateInput
  connect: CloudImageWhereUniqueInput
  disconnect: Boolean
}

input IngredientUpdateArgs {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateInput!
}

input IngredientCreateInput {
  name: String
  note: String
  status: IngredientStatusType
  key: Boolean
  onShoppingList: Boolean
  category: CategoryRelateToOneForCreateInput
  recipes: RecipeRelateToManyForCreateInput
  image: CloudImageRelateToOneForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input RecipeRelateToManyForCreateInput {
  create: [RecipeCreateInput!]
  connect: [RecipeWhereUniqueInput!]
}

input CloudImageRelateToOneForCreateInput {
  create: CloudImageCreateInput
  connect: CloudImageWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  order: Int
  image: CloudImage
}

input CategoryWhereUniqueInput {
  id: ID
  order: Int
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  image: CloudImageWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
}

input CategoryUpdateInput {
  name: String
  order: Int
  image: CloudImageRelateToOneForUpdateInput
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  order: Int
  image: CloudImageRelateToOneForCreateInput
}

type Recipe {
  id: ID!
  name: String
  originalLink: String
  ingredients(
    where: IngredientWhereInput! = {}
    orderBy: [IngredientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Ingredient!]
  ingredientsCount(where: IngredientWhereInput! = {}): Int
  image: CloudImage
  instructions: Recipe_instructions_Document
}

type Recipe_instructions_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input RecipeWhereUniqueInput {
  id: ID
}

input RecipeWhereInput {
  AND: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  NOT: [RecipeWhereInput!]
  id: IDFilter
  name: StringFilter
  originalLink: StringFilter
  ingredients: IngredientManyRelationFilter
  image: CloudImageWhereInput
}

input IngredientManyRelationFilter {
  every: IngredientWhereInput
  some: IngredientWhereInput
  none: IngredientWhereInput
}

input RecipeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  originalLink: OrderDirection
}

input RecipeUpdateInput {
  name: String
  originalLink: String
  ingredients: IngredientRelateToManyForUpdateInput
  image: CloudImageRelateToOneForUpdateInput
  instructions: JSON
}

input IngredientRelateToManyForUpdateInput {
  disconnect: [IngredientWhereUniqueInput!]
  set: [IngredientWhereUniqueInput!]
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
}

input RecipeUpdateArgs {
  where: RecipeWhereUniqueInput!
  data: RecipeUpdateInput!
}

input RecipeCreateInput {
  name: String
  originalLink: String
  ingredients: IngredientRelateToManyForCreateInput
  image: CloudImageRelateToOneForCreateInput
  instructions: JSON
}

input IngredientRelateToManyForCreateInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
}

type CloudImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input CloudImageWhereUniqueInput {
  id: ID
}

input CloudImageWhereInput {
  AND: [CloudImageWhereInput!]
  OR: [CloudImageWhereInput!]
  NOT: [CloudImageWhereInput!]
  id: IDFilter
  altText: StringFilter
}

input CloudImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input CloudImageUpdateInput {
  image: Upload
  altText: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CloudImageUpdateArgs {
  where: CloudImageWhereUniqueInput!
  data: CloudImageUpdateInput!
}

input CloudImageCreateInput {
  image: Upload
  altText: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createIngredient(data: IngredientCreateInput!): Ingredient
  createIngredients(data: [IngredientCreateInput!]!): [Ingredient]
  updateIngredient(
    where: IngredientWhereUniqueInput!
    data: IngredientUpdateInput!
  ): Ingredient
  updateIngredients(data: [IngredientUpdateArgs!]!): [Ingredient]
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteIngredients(where: [IngredientWhereUniqueInput!]!): [Ingredient]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createRecipe(data: RecipeCreateInput!): Recipe
  createRecipes(data: [RecipeCreateInput!]!): [Recipe]
  updateRecipe(where: RecipeWhereUniqueInput!, data: RecipeUpdateInput!): Recipe
  updateRecipes(data: [RecipeUpdateArgs!]!): [Recipe]
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteRecipes(where: [RecipeWhereUniqueInput!]!): [Recipe]
  createCloudImage(data: CloudImageCreateInput!): CloudImage
  createCloudImages(data: [CloudImageCreateInput!]!): [CloudImage]
  updateCloudImage(
    where: CloudImageWhereUniqueInput!
    data: CloudImageUpdateInput!
  ): CloudImage
  updateCloudImages(data: [CloudImageUpdateArgs!]!): [CloudImage]
  deleteCloudImage(where: CloudImageWhereUniqueInput!): CloudImage
  deleteCloudImages(where: [CloudImageWhereUniqueInput!]!): [CloudImage]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  ingredients(
    where: IngredientWhereInput! = {}
    orderBy: [IngredientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Ingredient!]
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  ingredientsCount(where: IngredientWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  recipes(
    where: RecipeWhereInput! = {}
    orderBy: [RecipeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Recipe!]
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipesCount(where: RecipeWhereInput! = {}): Int
  cloudImages(
    where: CloudImageWhereInput! = {}
    orderBy: [CloudImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CloudImage!]
  cloudImage(where: CloudImageWhereUniqueInput!): CloudImage
  cloudImagesCount(where: CloudImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
