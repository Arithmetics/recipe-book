{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["/*\nWelcome to Keystone! This file is what keystone uses to start the app.\n\nIt looks at the default export, and expects a Keystone config object.\n\nYou can find all the config options in our docs here: https://keystonejs.com/docs/apis/config\n*/\n\nimport { config } from '@keystone-6/core';\n\n// Look in the schema file for how we define our lists, and how users interact with them through graphql or the Admin UI\nimport { lists } from './schema';\n\n// Keystone auth is configured separately - check out the basic auth setup we are importing from our auth file.\nimport { withAuth, session } from './auth';\n\nconst frontendUrl = process.env.FRONTEND_URL;\n\nif (!frontendUrl) {\n  throw new Error(`Where's your FRONTEND_URL dude`);\n}\n\nexport default withAuth(\n  // Using the config function helps typescript guide you to the available options.\n  config({\n    // the db sets the database provider - we're using sqlite for the fastest startup experience\n    graphql: {\n      cors: {\n        origin: frontendUrl,\n        credentials: true,\n      },\n    },\n    server: {\n      cors: {\n        origin: frontendUrl,\n        credentials: true,\n      },\n    },\n    db: {\n      provider: 'postgresql',\n      url: `${process.env.DATABASE_URL}?pool_timeout=0`,\n      enableLogging: true,\n      idField: { kind: 'uuid' },\n    },\n    // This config allows us to set up features of the Admin UI https://keystonejs.com/docs/apis/config#ui\n    ui: {\n      // For our starter, we check that someone has session data before letting them see the Admin UI.\n      isAccessAllowed: (context) => !!context.session?.data,\n    },\n    lists,\n    session,\n  })\n);\n", "import { list } from '@keystone-6/core';\n\nimport { text, relationship, password, select, checkbox, integer } from '@keystone-6/core/fields';\nimport { cloudinaryImage } from '@keystone-6/cloudinary';\nimport { document } from '@keystone-6/fields-document';\n// import { Lists } from '.keystone/types';\nimport 'dotenv/config';\n\nexport const cloudinary = {\n  cloudName: process.env.CLOUDINARY_CLOUD_NAME || '',\n  apiKey: process.env.CLOUDINARY_KEY || '',\n  apiSecret: process.env.CLOUDINARY_SECRET || '',\n  folder: 'recipes',\n};\n\nfunction isSignedIn({ session }: { session?: unknown }): boolean {\n  return !!session;\n}\n\nexport const lists = {\n  User: list({\n    access: {\n      operation: {\n        query: () => true,\n        delete: isSignedIn,\n        create: isSignedIn,\n        update: isSignedIn,\n      },\n    },\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({\n        validation: { isRequired: true },\n        isIndexed: 'unique',\n        isFilterable: true,\n      }),\n      password: password({ validation: { isRequired: true } }),\n    },\n    ui: {\n      listView: {\n        initialColumns: ['name', 'email'],\n      },\n    },\n  }),\n  Ingredient: list({\n    access: {\n      operation: {\n        query: () => true,\n        delete: isSignedIn,\n        create: isSignedIn,\n        update: isSignedIn,\n      },\n    },\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      note: text(),\n      status: select({\n        type: 'enum',\n        options: [\n          { label: 'Good', value: 'GOOD' },\n          { label: 'Low', value: 'LOW' },\n          { label: 'Out', value: 'OUT' },\n        ],\n        validation: {\n          isRequired: true,\n        },\n        ui: { displayMode: 'select' },\n      }),\n      key: checkbox({ defaultValue: false }),\n      onShoppingList: checkbox({ defaultValue: false }),\n      category: relationship({ ref: 'Category' }),\n      recipes: relationship({ ref: 'Recipe.ingredients', many: true }),\n      image: relationship({\n        ref: 'CloudImage',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['image', 'altText'],\n          inlineCreate: { fields: ['image', 'altText'] },\n          inlineEdit: { fields: ['image', 'altText'] },\n        },\n      }),\n    },\n    hooks: {\n      resolveInput: async ({ resolvedData }) => {\n        const newResolve = { ...resolvedData };\n        if (resolvedData.status === 'GOOD') {\n          newResolve.onShoppingList = false;\n        }\n        return newResolve;\n      },\n    },\n    ui: {\n      listView: {\n        initialColumns: ['name', 'status', 'key', 'onShoppingList'],\n      },\n    },\n  }),\n  Category: list({\n    access: {\n      operation: {\n        query: () => true,\n        delete: isSignedIn,\n        create: isSignedIn,\n        update: isSignedIn,\n      },\n    },\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      order: integer({ isIndexed: 'unique' }),\n      image: relationship({\n        ref: 'CloudImage',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['image', 'altText'],\n          inlineCreate: { fields: ['image', 'altText'] },\n          inlineEdit: { fields: ['image', 'altText'] },\n        },\n      }),\n    },\n  }),\n  Recipe: list({\n    access: {\n      operation: {\n        query: () => true,\n        delete: isSignedIn,\n        create: isSignedIn,\n        update: isSignedIn,\n      },\n    },\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      originalLink: text(),\n      ingredients: relationship({ ref: 'Ingredient.recipes', many: true }),\n      image: relationship({\n        ref: 'CloudImage',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['image', 'altText'],\n          inlineCreate: { fields: ['image', 'altText'] },\n          inlineEdit: { fields: ['image', 'altText'] },\n        },\n      }),\n      tags: relationship({ ref: 'Tag', many: true }),\n      instructions: document({\n        formatting: true,\n        dividers: true,\n        links: true,\n      }),\n    },\n  }),\n  CloudImage: list({\n    access: {\n      operation: {\n        query: () => true,\n        delete: isSignedIn,\n        create: isSignedIn,\n        update: isSignedIn,\n      },\n    },\n    fields: {\n      image: cloudinaryImage({\n        cloudinary,\n        label: 'Source',\n      }),\n      altText: text({ validation: { isRequired: false } }),\n    },\n    ui: {\n      listView: {\n        initialColumns: ['image', 'altText'],\n      },\n    },\n  }),\n  RecipeToTry: list({\n    access: {\n      operation: {\n        query: () => true,\n        delete: isSignedIn,\n        create: isSignedIn,\n        update: isSignedIn,\n      },\n    },\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      originalLink: text(),\n    },\n    ui: {\n      listView: {\n        initialColumns: ['name', 'originalLink'],\n      },\n    },\n  }),\n  Tag: list({\n    access: {\n      operation: {\n        query: () => true,\n        delete: isSignedIn,\n        create: isSignedIn,\n        update: isSignedIn,\n      },\n    },\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      image: relationship({\n        ref: 'CloudImage',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['image', 'altText'],\n          inlineCreate: { fields: ['image', 'altText'] },\n          inlineEdit: { fields: ['image', 'altText'] },\n        },\n      }),\n    },\n  }),\n};\n", "import { createAuth } from '@keystone-6/auth';\n\nimport { statelessSessions } from '@keystone-6/core/session';\n\nlet sessionSecret = process.env.SESSION_SECRET;\n\nif (!sessionSecret) {\n  if (process.env.NODE_ENV === 'production') {\n    throw new Error('The SESSION_SECRET environment variable must be set in production');\n  } else {\n    sessionSecret = '-- DEV COOKIE SECRET; CHANGE ME --';\n  }\n}\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  sessionData: 'name',\n  secretField: 'password',\n  initFirstItem: {\n    fields: ['name', 'email', 'password'],\n  },\n});\n\nconst sessionMaxAge = 60 * 60 * 24 * 30; // 30 days\n\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "session"]
}
